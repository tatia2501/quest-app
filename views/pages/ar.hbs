<!DOCTYPE html>
<head>
  {{>head}}
  <script src="https://unpkg.com/three@0.126.0/build/three.js"></script>
  <script src="libs/artoolkit.min.js"></script>
  <script src="libs/artoolkit.api.js"></script>
  <script src="libs/threex-artoolkitsource.js"></script>
  <script src="libs/threex-artoolkitcontext.js"></script>
  <script src="libs/threex-arbasecontrols.js"></script>
  <script src="libs/threex-armarkercontrols.js"></script>
</head>
<body>
<script>
  var scene, camera, renderer, clock, deltaTime, totalTime;
  var arToolkitSource, arToolkitContext;
  var markerRoot1;
  var mesh1;

  initialize();
  animate();

  function initialize()
  {
    scene = new THREE.Scene();

    let ambientLight = new THREE.AmbientLight( 0xcccccc, 0.5 );
    scene.add( ambientLight );

    camera = new THREE.Camera();
    scene.add(camera);

    renderer = new THREE.WebGLRenderer({
      antialias : true,
      alpha: true
    });
    renderer.setClearColor(new THREE.Color('lightgrey'), 0)
    renderer.setSize( 640, 480 );
    renderer.domElement.style.position = 'absolute'
    renderer.domElement.style.top = '0px'
    renderer.domElement.style.left = '0px'
    document.body.appendChild( renderer.domElement );

    clock = new THREE.Clock();
    deltaTime = 0;
    totalTime = 0;

    arToolkitSource = new THREEx.ArToolkitSource({
      sourceType : 'webcam',
    });

    function onResize()
    {
      arToolkitSource.onResize()
      arToolkitSource.copySizeTo(renderer.domElement)
      if ( arToolkitContext.arController !== null )
      {
        arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)
      }
    }

    arToolkitSource.init(function onReady(){
      onResize()
    });

    window.addEventListener('resize', function(){
      onResize()
    });

    arToolkitContext = new THREEx.ArToolkitContext({
      cameraParametersUrl: 'libs/camera_para.dat',
      detectionMode: 'mono'
    });

    arToolkitContext.init( function onCompleted(){
      camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );
    });

    markerRoot1 = new THREE.Group();
    scene.add(markerRoot1);
    let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {
      type: 'pattern', patternUrl: "data/pattern-marker.patt",
    })

    const loader = new THREE.FontLoader()
    loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {
      const geometry = new THREE.TextGeometry('You are beautiful!', {
        font: font,
        size: 0.2,
        height: 0.2,
        curveSegments: 12,
        bevelEnabled: false,
        bevelThickness: 0.5,
        bevelSize: 0.3,
        bevelOffset: 0,
        bevelSegments: 5,
      })
      const material = new THREE.MeshFaceMaterial([
        new THREE.MeshPhongMaterial({
          color: 0x000000,
          flatShading: true,
        }),
        new THREE.MeshPhongMaterial({
          color: 0xffffff
        }),
      ])

      const mesh = new THREE.Mesh(geometry, material)
      mesh.name = 'text'
      mesh.rotation.x = -Math.PI/2;
      markerRoot1.add(mesh)
    })
  }

  function update()
  {
    if ( arToolkitSource.ready !== false )
      arToolkitContext.update( arToolkitSource.domElement );
  }

  function render()
  {
    renderer.render( scene, camera );
  }

  function animate()
  {
    requestAnimationFrame(animate);
    deltaTime = clock.getDelta();
    totalTime += deltaTime;
    update();
    render();
  }
</script>
</body>
</html>