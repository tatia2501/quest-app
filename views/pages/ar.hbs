<!DOCTYPE html>
<head>
  {{>head}}
  <script src="https://unpkg.com/three@0.126.0/build/three.js"></script>
  <script src="libs/artoolkit.min.js"></script>
  <script src="libs/artoolkit.api.js"></script>
  <script src="libs/threex-artoolkitsource.js"></script>
  <script src="libs/threex-artoolkitcontext.js"></script>
  <script src="libs/threex-arbasecontrols.js"></script>
  <script src="libs/threex-armarkercontrols.js"></script>

  <meta http-equiv='X-UA-Compatible' content='IE=edge'>
  <script src="https://aframe.io/releases/0.9.2/aframe.min.js"></script>
  <script src='https://raw.githack.com/jeromeetienne/AR.js/master/aframe/build/aframe-ar.js'></script>
  <script>
    THREEx.ArToolkitContext.baseURL = 'https://raw.githack.com/jeromeetienne/ar.js/master/three.js/'
  </script>
</head>
<body>
<a-scene
  vr-mode-ui="enabled: false"
  embedded
  arjs='sourceType: webcam; sourceWidth:1280; sourceHeight:960; displayWidth: 1280; displayHeight: 960; debugUIEnabled: false;'>

  <a-entity gltf-model="data/magnemite/scene.gltf" rotation="0 180 0" scale="0.15 0.15 0.15" gps-entity-place="longitude: 36.868580; latitude: 58.937312;" animation-mixer></a-entity>

  <a-text
    value="This content will always face you."
    look-at="[gps-camera]"
    scale="120 120 120"
    gps-entity-place="latitude: 58.937312; longitude:  36.868580;"
  ></a-text>
  <!-- use far property to hide objects over 5000 meters -->
  <a-camera far="5000" gps-camera rotation-reader></a-camera>
</a-scene>

<!--<script>-->
<!--  var scene, camera, renderer, clock, deltaTime, totalTime;-->
<!--  var arToolkitSource, arToolkitContext;-->

<!--  const getMarkers = async () => {-->
<!--    return await fetch(`/marker`, { method: 'GET' }).then((response) => response.json());-->
<!--  };-->

<!--  const changeScore = async (user_id, score) => {-->
<!--    await fetch(`/user/${user_id}?score=${score}`, {-->
<!--      method: 'PUT',-->
<!--      headers: {-->
<!--        accept: '*/*'-->
<!--      },-->
<!--    });-->
<!--  };-->

<!--  async function initialize() {-->
<!--    scene = new THREE.Scene();-->

<!--    let ambientLight = new THREE.AmbientLight(0xcccccc, 0.5);-->
<!--    scene.add(ambientLight);-->

<!--    camera = new THREE.Camera();-->
<!--    scene.add(camera);-->

<!--    renderer = new THREE.WebGLRenderer({-->
<!--      antialias: true,-->
<!--      alpha: true-->
<!--    });-->
<!--    renderer.setClearColor(new THREE.Color('lightgrey'), 0)-->
<!--    renderer.setSize(640, 480);-->
<!--    renderer.domElement.style.position = 'absolute'-->
<!--    renderer.domElement.style.top = '0px'-->
<!--    renderer.domElement.style.left = '0px'-->
<!--    document.body.appendChild(renderer.domElement);-->

<!--    clock = new THREE.Clock();-->
<!--    deltaTime = 0;-->
<!--    totalTime = 0;-->

<!--    arToolkitSource = new THREEx.ArToolkitSource({-->
<!--      sourceType: 'webcam',-->
<!--    });-->

<!--    function onResize() {-->
<!--      arToolkitSource.onResize()-->
<!--      arToolkitSource.copySizeTo(renderer.domElement)-->
<!--      if (arToolkitContext.arController !== null) {-->
<!--        arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)-->
<!--      }-->
<!--    }-->

<!--    arToolkitSource.init(function onReady() {-->
<!--      onResize()-->
<!--    });-->

<!--    window.addEventListener('resize', function() {-->
<!--      onResize()-->
<!--    });-->

<!--    arToolkitContext = new THREEx.ArToolkitContext({-->
<!--      cameraParametersUrl: 'libs/camera_para.dat',-->
<!--      detectionMode: 'mono'-->
<!--    });-->

<!--    arToolkitContext.init(function onCompleted() {-->
<!--      camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());-->
<!--    });-->

<!--    const data = (await getMarkers()).slice();-->
<!--    var markerRoots = [];-->
<!--    var i = 0;-->

<!--    for (const item of data) {-->
<!--      markerRoots[i] = new THREE.Group();-->

<!--      let markerControls = new THREEx.ArMarkerControls(arToolkitContext, markerRoots[i], {-->
<!--        type: 'pattern', patternUrl: `data/${item.image}.patt`,-->
<!--      })-->

<!--      markerControls.addEventListener('markerFound', async () => {-->
<!--        let start_time = sessionStorage.getItem('start_time');-->
<!--        let user_code = sessionStorage.getItem('user_code');-->
<!--        let total_score = sessionStorage.getItem('total_score');-->
<!--        let current_time = Date.parse(new Date());-->
<!--        let minutes = (current_time - Number(start_time)) / 60000;-->
<!--        await changeScore(user_code, String(Number(minutes.toFixed(2)) + Number(total_score)));-->
<!--      });-->

<!--      const canvas = document.createElement('canvas')-->
<!--      const context = canvas.getContext('2d')-->
<!--      context.fillStyle = 'black'-->
<!--      context.font = '10px sans-serif'-->
<!--      context.fillText(`${item.text}`, 90, 90)-->
<!--      const texture = new THREE.Texture(canvas)-->
<!--      texture.needsUpdate = true-->
<!--      var material = new THREE.MeshBasicMaterial({-->
<!--        map: texture,-->
<!--        side: THREE.DoubleSide,-->
<!--      })-->
<!--      material.transparent = true-->
<!--      var mesh = new THREE.Mesh(new THREE.PlaneGeometry(3, 3), material)-->
<!--      mesh.name = 'text'-->
<!--      mesh.rotation.x = -Math.PI / 2;-->
<!--      markerRoots[i].add(mesh)-->

<!--      scene.add(markerRoots[i]);-->
<!--      i++;-->
<!--    }-->
<!--  }-->

<!--  function update()-->
<!--  {-->
<!--    if ( arToolkitSource.ready !== false )-->
<!--      arToolkitContext.update( arToolkitSource.domElement );-->
<!--  }-->

<!--  function render()-->
<!--  {-->
<!--    renderer.render( scene, camera );-->
<!--  }-->

<!--  function animate()-->
<!--  {-->
<!--    requestAnimationFrame(animate);-->
<!--    deltaTime = clock.getDelta();-->
<!--    totalTime += deltaTime;-->
<!--    update();-->
<!--    render();-->
<!--  }-->

<!--  initialize();-->
<!--  animate();-->
<!--</script>-->
</body>
</html>